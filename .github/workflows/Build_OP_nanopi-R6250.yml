name: OpenWrt_NETGEAR_R6250
on:
#  schedule:
#    - cron: "0 17 * * *"
  workflow_dispatch:
  push:
    branches:
      - master
env:
  conf_name: r6250.config
  BRANCH_NAME: openwrt-22.03
  version_name: r6250

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Init Building Dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone Asia/Shanghai
        docker rmi $(docker images -q)
        echo "--------------------------0------------------------------------"
        sudo -E apt-get remove -y --purge azure-cli ghc zulu* hhvm llvm* firefox google* dotnet* powershell mysql* php* mssql-tools msodbcsql17 android*
        echo "--------------------------1------------------------------------"
        sudo -E apt-get update -y
        echo "--------------------------2------------------------------------"
        echo "sudo -E apt-get full-upgrade -y"
        echo "--------------------------3------------------------------------"
        sudo -E apt-get install -y build-essential asciidoc binutils bzip2 coreutils gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-8 gcc++-8 gcc-8-multilib g++-8-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf ecj fastjar re2c xz-utils tar
        echo "--------------------------4------------------------------------"
        for i in $(ls /usr/bin/*-8); do sudo -E ln -sf $i ${i%%-8*}; done
        echo "--------------------------5------------------------------------"
        sudo -E ln -sf /usr/include/asm-generic /usr/include/asm
        echo "--------------------------6------------------------------------"
        sudo -E apt-get autoremove -y --purge
        echo "--------------------------7------------------------------------"
        sudo -E apt-get clean -y
        echo "--------------------------8------------------------------------"
        sudo -E swapoff -a
        echo "--------------------------9------------------------------------"
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc /swapfile /imagegeneration /mnt/swapfile /opt/hostedtoolcache /usr/local/.ghcup
        echo "--------------------------10------------------------------------"

    - name: Server Benchmark
      run: |
        wget -qO- --no-check-certificate https://raw.githubusercontent.com/SaintVamp/AutoBuild-OpenWRT/master/bench.sh | bash

    - name: Clone Source
      run: |
        cd "/home/runner"
        git clone --branch "${BRANCH_NAME}" --single-branch "https://github.com/SaintVamp/openwrt" "openwrt"
        sudo chown -R runner:runner "openwrt"
        cd "/home/runner/openwrt"
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Build OpenWrt
      run: |
        cd "/home/runner/openwrt"
        cp -f "${GITHUB_WORKSPACE}/configs/${conf_name}" ".config"
        make defconfig
        make -j$[$(nproc)+1] V=sc
#        make -j1
#        make -j1 V=sc

    - name: Prepare Release Zip File
      id: assemble_artifact
      run: |
        release_tag="${version_name}-$(date +%s)"
        echo "release_tag=$release_tag" >> $GITHUB_ENV
        cd "/home/runner/openwrt"
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find ./bin/targets/ -type f -name "*.ipk") ./artifact/package/
        cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
        zip -q -0 -r OpenWrt-Package-SV-${release_tag}.zip ./artifact/package/
        zip -q -0 -r OpenWrt-BuildInfo-SV-${release_tag}.zip ./artifact/buildinfo/
        zip -q -0 -r OpenWrt-Firmware-SV-${release_tag}.zip ./bin/targets/
        zip -q -0 -r OpenWrt-Download-SV-${release_tag}.zip ./dl/
        echo "---------------------"

    - name: Check Build Info
      id: check_build_info
      run: |
        echo ${GITHUB_WORKSPACE}
        cd "/home/runner/openwrt"
        ls artifact/buildinfo/
        echo "---------------------"
        ls artifact/package/
        echo "---------------------"
        ls bin/targets/
        echo "---------------------"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_tag }}
        release_name: OpenWrt-${{ env.release_tag }}
        draft: false
        prerelease: false

    - name: Upload Firmware Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/openwrt/OpenWrt-Firmware-SV-${{env.release_tag}}.zip
        asset_name: OpenWrt-Firmware-SV-${{env.release_tag}}.zip
        asset_content_type: application/zip

    - name: Upload Package Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/openwrt/OpenWrt-Package-SV-${{env.release_tag}}.zip
        asset_name: OpenWrt-Package-SV-${{env.release_tag}}.zip
        asset_content_type: application/zip

    - name: Upload BuildInfo Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/openwrt/OpenWrt-BuildInfo-SV-${{env.release_tag}}.zip
        asset_name: OpenWrt-BuildInfo-SV-${{env.release_tag}}.zip
        asset_content_type: application/zip


    - name: Upload BuildInfo Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: /home/runner/openwrt/OpenWrt-Download-SV-${{env.release_tag}}.zip
        asset_name: OpenWrt-Download-SV-${{env.release_tag}}.zip
        asset_content_type: application/zip

